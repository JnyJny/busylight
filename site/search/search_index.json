{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BusyLight for Humans","text":"<p>BusyLight for Humans controls USB LED lights from multiple vendors. Use the command-line interface or HTTP API to turn lights on/off, change colors, and apply effects.</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code># Basic installation (CLI only)\npip install busylight-for-humans\n\n# With web API support\npip install busylight-for-humans[webapi]\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code># Turn light on (green by default)\nbusylight on\n\n# Turn light red\nbusylight on red\n\n# Blink light blue 5 times\nbusylight blink blue --count 5\n\n# Control specific LED on multi-LED devices\nbusylight on red --led 1\n</code></pre>"},{"location":"#web-api","title":"Web API","text":"<pre><code># Start API server\nbusyserve\n\n# Turn light on via HTTP\ncurl http://localhost:8000/light/0/on?color=red\n\n# Blink light via HTTP\ncurl http://localhost:8000/light/0/blink?color=blue&amp;count=3\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Cross-platform: macOS and Linux support (Windows in development)</li> <li>Multiple interfaces: Command-line and HTTP API</li> <li>Device support: 23 devices from 9 vendors</li> <li>LED targeting: Individual LED control for multi-LED devices</li> <li>Effects: Blinking, rainbow, pulse, and custom effects</li> <li>Authentication: Optional HTTP Basic Auth for API</li> </ul>"},{"location":"#supported-devices","title":"Supported Devices","text":"Vendor Multi-LED Support Agile Innovative (BlinkStick) \u2713 ThingM (Blink1 mk2) \u2713 Luxafor (Flag variants) \u2713 Kuando, Embrava, MuteMe Single LED <p>See the devices overview for complete compatibility information.</p>"},{"location":"#documentation-sections","title":"Documentation Sections","text":"<ul> <li>Installation: Setup instructions for different   platforms</li> <li>CLI: Command-line interface reference and examples</li> <li>Web API: HTTP API endpoints and integration guide</li> <li>Devices: Hardware compatibility and LED support</li> </ul>"},{"location":"#source-code","title":"Source Code","text":"<p>The project is open source and available on GitHub. For Python integration, see Busylight Core.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.11 or higher</li> <li>USB LED light device</li> <li>macOS or Linux (Windows support in development)</li> </ul>"},{"location":"installation/#basic-installation","title":"Basic Installation","text":"<p>The basic installation includes the <code>busylight</code> command-line tool.</p>"},{"location":"installation/#using-pip","title":"Using pip","text":"<pre><code>pip install busylight-for-humans\n</code></pre>"},{"location":"installation/#using-uvx","title":"Using uvx","text":"<pre><code>uvx --from busylight-for-humans busylight list\n</code></pre>"},{"location":"installation/#web-api-installation","title":"Web API Installation","text":"<p>To use the HTTP API server, install with web API dependencies.</p>"},{"location":"installation/#using-pip_1","title":"Using pip","text":"<pre><code>pip install busylight-for-humans[webapi]\n</code></pre>"},{"location":"installation/#using-uvx_1","title":"Using uvx","text":"<pre><code>uvx --from \"busylight-for-humans[webapi]\" busyserve\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>For development, use uv for dependency management.</p> <pre><code># Install uv\npip install uv\n\n# Clone repository\ngit clone https://github.com/JnyJny/busylight.git\ncd busylight\n\n# Install with all dependencies\nuv sync --all-extras\nsource .venv/bin/activate\n\n# Verify installation\nbusylight --help\nbusyserve --help\npytest\n</code></pre>"},{"location":"installation/#platform-specific-setup","title":"Platform-Specific Setup","text":""},{"location":"installation/#linux-udev-rules","title":"Linux (udev rules)","text":"<p>Linux requires udev rules for USB device access. Run these commands with root privileges:</p> <pre><code># Generate udev rules\nbusylight udev-rules -o 99-busylights.rules\n\n# Install rules\nsudo cp 99-busylights.rules /etc/udev/rules.d/\nsudo udevadm control -R\n\n# Unplug and reconnect your light\nbusylight on\n</code></pre>"},{"location":"installation/#macos","title":"macOS","text":"<p>No additional setup required. The system may prompt for permission to access USB devices.</p>"},{"location":"installation/#windows","title":"Windows","text":"<p>Windows support is in development. Basic functionality may work, but full compatibility is not guaranteed.</p>"},{"location":"installation/#verification","title":"Verification","text":"<p>Test your installation:</p> <pre><code># List connected lights\nbusylight list\n\n# Turn on first light\nbusylight on\n\n# Start web API (if installed)\nbusyserve --help\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#no-lights-found","title":"No lights found","text":"<ol> <li>Verify device is connected via USB</li> <li>Check device compatibility in supported devices</li> <li>On Linux, ensure udev rules are installed</li> <li>Try running with <code>--debug</code> flag for detailed output</li> </ol>"},{"location":"installation/#permission-errors","title":"Permission errors","text":"<ul> <li>Linux: Install udev rules as shown above</li> <li>macOS: Grant USB device permissions when prompted</li> <li>Windows: Run as administrator (experimental)</li> </ul>"},{"location":"installation/#import-errors","title":"Import errors","text":"<p>Ensure you have the correct optional dependencies:</p> <pre><code># For web API features\npip install busylight-for-humans[webapi]\n\n# For development\npip install busylight-for-humans[webapi,docs]\n</code></pre>"},{"location":"api/","title":"Web API Overview","text":"<p>The BusyLight HTTP API provides RESTful endpoints for controlling USB LED lights. The API returns JSON responses and supports the same functionality as the command-line interface.</p>"},{"location":"api/#quick-start","title":"Quick Start","text":""},{"location":"api/#start-the-server","title":"Start the Server","text":"<pre><code># Install with web API support\npip install busylight-for-humans[webapi]\n\n# Start server\nbusyserve\n\n# Start with custom host/port\nbusyserve --host 0.0.0.0 --port 8080\n\n# Start in background\nbusyserve -D\n</code></pre>"},{"location":"api/#basic-usage","title":"Basic Usage","text":"<pre><code># Get server status\ncurl http://localhost:8000/\n\n# Turn light on (green)\ncurl http://localhost:8000/light/0/on\n\n# Turn light red\ncurl \"http://localhost:8000/light/0/on?color=red\"\n\n# Blink light blue 3 times\ncurl \"http://localhost:8000/light/0/blink?color=blue&amp;count=3\"\n\n# Turn light off\ncurl http://localhost:8000/light/0/off\n</code></pre>"},{"location":"api/#api-features","title":"API Features","text":"<ul> <li>RESTful design with consistent JSON responses</li> <li>Device targeting by index or all devices</li> <li>LED targeting for multi-LED devices</li> <li>Color specification via query parameters</li> <li>Effect control with customizable parameters</li> <li>Authentication via HTTP Basic Auth (optional)</li> <li>CORS support for browser-based applications</li> <li>Interactive documentation at <code>/docs</code> and <code>/redoc</code></li> </ul>"},{"location":"api/#base-url","title":"Base URL","text":"<pre><code>http://localhost:8000\n</code></pre> <p>Default host is <code>localhost</code> and port is <code>8000</code>. Configure with command-line options:</p> <pre><code>busyserve --host 0.0.0.0 --port 8080\n</code></pre>"},{"location":"api/#response-format","title":"Response Format","text":"<p>All endpoints return JSON responses with consistent structure:</p>"},{"location":"api/#success-response","title":"Success Response","text":"<pre><code>{\n  \"action\": \"on\",\n  \"light_id\": 0,\n  \"color\": \"red\", \n  \"rgb\": [255, 0, 0],\n  \"led\": 0\n}\n</code></pre>"},{"location":"api/#error-response","title":"Error Response","text":"<pre><code>{\n  \"message\": \"Light index 5 not found\"\n}\n</code></pre>"},{"location":"api/#content-types","title":"Content Types","text":"<ul> <li>Request: Query parameters or JSON body</li> <li>Response: <code>application/json</code></li> </ul>"},{"location":"api/#status-codes","title":"Status Codes","text":"Code Description 200 Success 404 Device not found 422 Invalid parameter 500 Server error"},{"location":"api/#authentication","title":"Authentication","text":"<p>Optional HTTP Basic Authentication for securing API access.</p>"},{"location":"api/#setup","title":"Setup","text":"<pre><code># Set environment variables\nexport BUSYLIGHT_API_USER=\"admin\"\nexport BUSYLIGHT_API_PASS=\"secret\"\n\n# Start server\nbusyserve\n</code></pre>"},{"location":"api/#usage","title":"Usage","text":"<pre><code># Authenticated request\ncurl -u admin:secret http://localhost:8000/light/0/on\n</code></pre> <p>Security Warning</p> <p>HTTP Basic Auth sends credentials in cleartext. Use HTTPS in production environments.</p>"},{"location":"api/#cors-configuration","title":"CORS Configuration","text":"<p>Configure Cross-Origin Resource Sharing for browser applications.</p>"},{"location":"api/#setup_1","title":"Setup","text":"<pre><code># Allow specific origins\nexport BUSYLIGHT_API_CORS_ORIGINS_LIST='[\"http://localhost:3000\", \"https://myapp.com\"]'\n\n# Start server  \nbusyserve\n</code></pre>"},{"location":"api/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable debug CORS (localhost only)\nexport BUSYLIGHT_DEBUG=true\nbusyserve\n</code></pre>"},{"location":"api/#interactive-documentation","title":"Interactive Documentation","text":"<p>The API provides interactive documentation:</p> <ul> <li>Swagger UI: http://localhost:8000/docs</li> <li>ReDoc: http://localhost:8000/redoc</li> </ul> <p>These interfaces allow testing endpoints directly from the browser.</p>"},{"location":"api/#rate-limiting","title":"Rate Limiting","text":"<p>The API does not impose rate limiting, but devices may have physical limitations on how quickly they can change colors or effects.</p>"},{"location":"api/#health-check","title":"Health Check","text":"<pre><code># Check server status\ncurl http://localhost:8000/\n\n# Response\n[\n  {\"path\": \"/\"},\n  {\"path\": \"/lights\"},\n  {\"path\": \"/light/{light_id}\"}\n]\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>The API provides detailed error messages for troubleshooting:</p> <ul> <li>Device not found: Check device connections and indices</li> <li>Invalid color: Use supported color names or hex values</li> <li>Parameter errors: Verify parameter names and value ranges</li> <li>Server errors: Check server logs with <code>--debug</code> flag</li> </ul>"},{"location":"api/#next-steps","title":"Next Steps","text":"<ul> <li>Endpoint Reference - Complete API documentation</li> <li>Integration Guide - Adding API to your projects</li> <li>Device Support - Hardware compatibility</li> </ul>"},{"location":"api/endpoints/","title":"API Endpoints","text":"<p>Complete reference for all BusyLight Web API endpoints.</p>"},{"location":"api/endpoints/#device-information","title":"Device Information","text":""},{"location":"api/endpoints/#list-available-endpoints","title":"List Available Endpoints","text":"<pre><code>GET /\n</code></pre> <p>Returns list of available API endpoints.</p> <p>Response: <pre><code>[\n  {\"path\": \"/\"},\n  {\"path\": \"/lights\"},  \n  {\"path\": \"/light/{light_id}\"}\n]\n</code></pre></p>"},{"location":"api/endpoints/#get-all-lights-status","title":"Get All Lights Status","text":"<pre><code>GET /lights\nGET /lights/status\n</code></pre> <p>Returns status information for all connected lights.</p> <p>Response: <pre><code>[\n  {\n    \"light_id\": 0,\n    \"name\": \"Blink(1) mk2\",\n    \"info\": {\n      \"path\": \"/dev/hidraw0\",\n      \"vendor_id\": 10168,\n      \"product_id\": 493\n    },\n    \"is_on\": true,\n    \"color\": \"red\",\n    \"rgb\": [255, 0, 0]\n  }\n]\n</code></pre></p>"},{"location":"api/endpoints/#get-single-light-status","title":"Get Single Light Status","text":"<pre><code>GET /light/{light_id}\nGET /light/{light_id}/status\n</code></pre> <p>Returns status for specific light.</p> <p>Parameters: - <code>light_id</code> (path, int): Light index (0-based)</p> <p>Response: <pre><code>{\n  \"light_id\": 0,\n  \"name\": \"Blink(1) mk2\",\n  \"info\": {\n    \"path\": \"/dev/hidraw0\",\n    \"vendor_id\": 10168,\n    \"product_id\": 493,\n    \"serial_number\": \"ABC123\",\n    \"is_acquired\": true\n  },\n  \"is_on\": true,\n  \"color\": \"red\",\n  \"rgb\": [255, 0, 0]\n}\n</code></pre></p>"},{"location":"api/endpoints/#light-control","title":"Light Control","text":""},{"location":"api/endpoints/#turn-light-on","title":"Turn Light On","text":"<pre><code>GET /light/{light_id}/on\n</code></pre> <p>Turn on specific light with optional color and LED targeting.</p> <p>Parameters: - <code>light_id</code> (path, int): Light index - <code>color</code> (query, str): Color name or hex value (default: \"green\") - <code>dim</code> (query, float): Brightness factor 0.0-1.0 (default: 1.0) - <code>led</code> (query, int): LED index for multi-LED devices (default: 0)</p> <p>Examples: <pre><code># Basic usage\ncurl http://localhost:8000/light/0/on\n\n# With color\ncurl \"http://localhost:8000/light/0/on?color=red\"\n\n# With hex color\ncurl \"http://localhost:8000/light/0/on?color=%23ff0000\"\n\n# With brightness\ncurl \"http://localhost:8000/light/0/on?color=blue&amp;dim=0.5\"\n\n# Target specific LED\ncurl \"http://localhost:8000/light/0/on?color=red&amp;led=1\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"action\": \"on\",\n  \"light_id\": 0,\n  \"color\": \"red\",\n  \"rgb\": [255, 0, 0],\n  \"dim\": 1.0,\n  \"led\": 0\n}\n</code></pre></p>"},{"location":"api/endpoints/#turn-all-lights-on","title":"Turn All Lights On","text":"<pre><code>GET /lights/on\n</code></pre> <p>Turn on all connected lights.</p> <p>Parameters: - <code>color</code> (query, str): Color name or hex value (default: \"green\") - <code>dim</code> (query, float): Brightness factor 0.0-1.0 (default: 1.0) - <code>led</code> (query, int): LED index for multi-LED devices (default: 0)</p> <p>Response: <pre><code>{\n  \"action\": \"on\",\n  \"light_id\": \"all\",\n  \"color\": \"green\",\n  \"rgb\": [0, 128, 0],\n  \"dim\": 1.0,\n  \"led\": 0\n}\n</code></pre></p>"},{"location":"api/endpoints/#turn-light-off","title":"Turn Light Off","text":"<pre><code>GET /light/{light_id}/off\n</code></pre> <p>Turn off specific light.</p> <p>Parameters: - <code>light_id</code> (path, int): Light index</p> <p>Response: <pre><code>{\n  \"action\": \"off\",\n  \"light_id\": 0\n}\n</code></pre></p>"},{"location":"api/endpoints/#turn-all-lights-off","title":"Turn All Lights Off","text":"<pre><code>GET /lights/off\n</code></pre> <p>Turn off all connected lights.</p> <p>Response: <pre><code>{\n  \"action\": \"off\",\n  \"light_id\": \"all\"\n}\n</code></pre></p>"},{"location":"api/endpoints/#effects","title":"Effects","text":""},{"location":"api/endpoints/#blink-effect","title":"Blink Effect","text":"<pre><code>GET /light/{light_id}/blink\n</code></pre> <p>Create blinking effect on specific light.</p> <p>Parameters: - <code>light_id</code> (path, int): Light index - <code>color</code> (query, str): Blink color (default: \"red\") - <code>speed</code> (query, str): Speed - \"slow\", \"medium\", \"fast\" (default: \"slow\") - <code>dim</code> (query, float): Brightness factor 0.0-1.0 (default: 1.0) - <code>count</code> (query, int): Number of blinks, 0=infinite (default: 0) - <code>led</code> (query, int): LED index for multi-LED devices (default: 0)</p> <p>Examples: <pre><code># Basic blinking\ncurl http://localhost:8000/light/0/blink\n\n# Blue, 5 blinks, fast\ncurl \"http://localhost:8000/light/0/blink?color=blue&amp;count=5&amp;speed=fast\"\n\n# Target specific LED\ncurl \"http://localhost:8000/light/0/blink?color=red&amp;led=1&amp;count=3\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"action\": \"blink\",\n  \"light_id\": 0,\n  \"color\": \"red\",\n  \"rgb\": [255, 0, 0],\n  \"speed\": \"slow\",\n  \"dim\": 1.0,\n  \"count\": 0,\n  \"led\": 0\n}\n</code></pre></p>"},{"location":"api/endpoints/#blink-all-lights","title":"Blink All Lights","text":"<pre><code>GET /lights/blink\n</code></pre> <p>Create blinking effect on all lights.</p> <p>Parameters: Same as single light blink</p> <p>Response: <pre><code>{\n  \"action\": \"blink\",\n  \"light_id\": \"all\",\n  \"color\": \"red\",\n  \"rgb\": [255, 0, 0],\n  \"speed\": \"slow\",\n  \"dim\": 1.0,\n  \"count\": 0,\n  \"led\": 0\n}\n</code></pre></p>"},{"location":"api/endpoints/#rainbow-effect","title":"Rainbow Effect","text":"<pre><code>GET /light/{light_id}/rainbow\n</code></pre> <p>Start rainbow color cycling on specific light.</p> <p>Parameters: - <code>light_id</code> (path, int): Light index - <code>speed</code> (query, str): Effect speed (default: \"slow\") - <code>dim</code> (query, float): Brightness factor (default: 1.0)</p> <p>Response: <pre><code>{\n  \"action\": \"effect\",\n  \"name\": \"rainbow\",\n  \"light_id\": 0,\n  \"speed\": \"slow\",\n  \"dim\": 1.0\n}\n</code></pre></p>"},{"location":"api/endpoints/#rainbow-all-lights","title":"Rainbow All Lights","text":"<pre><code>GET /lights/rainbow\n</code></pre> <p>Start rainbow effect on all lights.</p>"},{"location":"api/endpoints/#pulse-effect","title":"Pulse Effect","text":"<pre><code>GET /light/{light_id}/pulse\n</code></pre> <p>Create pulsing/breathing effect on specific light.</p> <p>Parameters: - <code>light_id</code> (path, int): Light index - <code>color</code> (query, str): Pulse color (default: \"red\") - <code>speed</code> (query, str): Pulse speed (default: \"slow\") - <code>dim</code> (query, float): Brightness factor (default: 1.0) - <code>count</code> (query, int): Number of pulses, 0=infinite (default: 0)</p> <p>Response: <pre><code>{\n  \"action\": \"effect\",\n  \"name\": \"pulse\",\n  \"light_id\": 0,\n  \"color\": \"red\",\n  \"rgb\": [255, 0, 0],\n  \"speed\": \"slow\",\n  \"dim\": 1.0,\n  \"count\": 0\n}\n</code></pre></p>"},{"location":"api/endpoints/#flash-lights-impressively-fli","title":"Flash Lights Impressively (FLI)","text":"<pre><code>GET /light/{light_id}/fli\n</code></pre> <p>Alternate between two colors (red and blue by default).</p> <p>Parameters: - <code>light_id</code> (path, int): Light index - <code>color_a</code> (query, str): First color (default: \"red\") - <code>color_b</code> (query, str): Second color (default: \"blue\")  - <code>speed</code> (query, str): Flash speed (default: \"slow\") - <code>dim</code> (query, float): Brightness factor (default: 1.0) - <code>count</code> (query, int): Number of flashes, 0=infinite (default: 0)</p> <p>Response: <pre><code>{\n  \"action\": \"effect\",\n  \"name\": \"fli\",\n  \"light_id\": 0,\n  \"speed\": \"slow\",\n  \"color\": \"red\",\n  \"dim\": 1.0,\n  \"count\": 0\n}\n</code></pre></p>"},{"location":"api/endpoints/#color-specification","title":"Color Specification","text":"<p>Colors can be specified as:</p> <ul> <li>Named colors: <code>red</code>, <code>green</code>, <code>blue</code>, <code>yellow</code>, <code>purple</code>, <code>white</code>, etc.</li> <li>Hex colors: <code>#ff0000</code>, <code>0xff0000</code>, <code>ff0000</code> (URL encode <code>#</code> as <code>%23</code>)</li> <li>RGB tuples: <code>rgb(255,0,0)</code> (URL encoded)</li> </ul>"},{"location":"api/endpoints/#led-parameter","title":"LED Parameter","text":"<p>For multi-LED devices (Blink1 mk2, BlinkStick variants):</p> <ul> <li><code>led=0</code>: Control all LEDs (default)</li> <li><code>led=1</code>: Control first/top LED</li> <li><code>led=2</code>: Control second/bottom LED</li> <li><code>led=3+</code>: Control additional LEDs (device-specific)</li> </ul> <p>Single-LED devices ignore this parameter.</p>"},{"location":"api/endpoints/#error-responses","title":"Error Responses","text":""},{"location":"api/endpoints/#device-not-found","title":"Device Not Found","text":"<pre><code>{\n  \"message\": \"Light index 5 not found\"\n}\n</code></pre> <p>Status Code: 404</p>"},{"location":"api/endpoints/#invalid-color","title":"Invalid Color","text":"<pre><code>{\n  \"message\": \"Invalid color specification: 'notacolor'\"\n}\n</code></pre> <p>Status Code: 422</p>"},{"location":"api/endpoints/#parameter-error","title":"Parameter Error","text":"<pre><code>{\n  \"message\": \"LED index must be &gt;= 0\"\n}\n</code></pre> <p>Status Code: 422</p>"},{"location":"api/endpoints/#rate-limiting","title":"Rate Limiting","text":"<p>No explicit rate limiting is enforced, but consider device physical limitations when making rapid requests.</p>"},{"location":"api/endpoints/#websocket-support","title":"WebSocket Support","text":"<p>Currently not supported. All communication uses HTTP GET requests with JSON responses.</p>"},{"location":"api/integration/","title":"API Integration Guide","text":"<p>Learn how to integrate the BusyLight Web API into your applications and services.</p>"},{"location":"api/integration/#server-setup","title":"Server Setup","text":""},{"location":"api/integration/#basic-server-configuration","title":"Basic Server Configuration","text":"<pre><code># server_config.py\nimport subprocess\nimport os\n\ndef start_busylight_server():\n    \"\"\"Start BusyLight API server with custom configuration.\"\"\"\n    env = os.environ.copy()\n\n    # Optional: Set authentication\n    env['BUSYLIGHT_API_USER'] = 'api_user'\n    env['BUSYLIGHT_API_PASS'] = 'secure_password'\n\n    # Optional: Enable CORS for web apps\n    env['BUSYLIGHT_API_CORS_ORIGINS_LIST'] = '[\"http://localhost:3000\"]'\n\n    # Start server\n    subprocess.Popen([\n        'busyserve', \n        '--host', '0.0.0.0',\n        '--port', '8000'\n    ], env=env)\n</code></pre>"},{"location":"api/integration/#docker-deployment","title":"Docker Deployment","text":"<pre><code># Dockerfile\nFROM python:3.11-slim\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    libusb-1.0-0-dev \\\n    libudev-dev \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install BusyLight\nRUN pip install busylight-for-humans[webapi]\n\n# Configure environment\nENV BUSYLIGHT_API_USER=admin\nENV BUSYLIGHT_API_PASS=changeme\nENV BUSYLIGHT_API_CORS_ORIGINS_LIST='[\"*\"]'\n\n# Expose port\nEXPOSE 8000\n\n# Add udev rules and start server\nCOPY 99-busylights.rules /etc/udev/rules.d/\nCMD [\"busyserve\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre> <pre><code># docker-compose.yml\nversion: '3.8'\nservices:\n  busylight:\n    build: .\n    ports:\n      - \"8000:8000\"\n    devices:\n      - /dev/bus/usb:/dev/bus/usb\n    privileged: true\n    environment:\n      - BUSYLIGHT_API_USER=admin\n      - BUSYLIGHT_API_PASS=secure_password\n</code></pre>"},{"location":"api/integration/#client-libraries","title":"Client Libraries","text":""},{"location":"api/integration/#python-client","title":"Python Client","text":"<pre><code>import requests\nimport json\nfrom typing import Optional, Dict, Any\n\nclass BusyLightClient:\n    \"\"\"Python client for BusyLight API.\"\"\"\n\n    def __init__(self, base_url: str = \"http://localhost:8000\", \n                 auth: Optional[tuple] = None):\n        self.base_url = base_url.rstrip('/')\n        self.auth = auth\n        self.session = requests.Session()\n        if auth:\n            self.session.auth = auth\n\n    def _request(self, endpoint: str, params: Optional[Dict] = None) -&gt; Dict[Any, Any]:\n        \"\"\"Make API request and return JSON response.\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        response = self.session.get(url, params=params or {})\n        response.raise_for_status()\n        return response.json()\n\n    def list_lights(self) -&gt; Dict[str, Any]:\n        \"\"\"Get status of all lights.\"\"\"\n        return self._request(\"/lights/status\")\n\n    def get_light(self, light_id: int) -&gt; Dict[str, Any]:\n        \"\"\"Get status of specific light.\"\"\"\n        return self._request(f\"/light/{light_id}/status\")\n\n    def turn_on(self, light_id: int, color: str = \"green\", \n                led: int = 0, dim: float = 1.0) -&gt; Dict[str, Any]:\n        \"\"\"Turn on specific light.\"\"\"\n        params = {\"color\": color, \"led\": led, \"dim\": dim}\n        return self._request(f\"/light/{light_id}/on\", params)\n\n    def turn_on_all(self, color: str = \"green\", \n                    led: int = 0, dim: float = 1.0) -&gt; Dict[str, Any]:\n        \"\"\"Turn on all lights.\"\"\"\n        params = {\"color\": color, \"led\": led, \"dim\": dim}\n        return self._request(\"/lights/on\", params)\n\n    def turn_off(self, light_id: int) -&gt; Dict[str, Any]:\n        \"\"\"Turn off specific light.\"\"\"\n        return self._request(f\"/light/{light_id}/off\")\n\n    def turn_off_all(self) -&gt; Dict[str, Any]:\n        \"\"\"Turn off all lights.\"\"\"\n        return self._request(\"/lights/off\")\n\n    def blink(self, light_id: int, color: str = \"red\", count: int = 0,\n              speed: str = \"slow\", led: int = 0) -&gt; Dict[str, Any]:\n        \"\"\"Start blinking effect.\"\"\"\n        params = {\n            \"color\": color, \"count\": count, \n            \"speed\": speed, \"led\": led\n        }\n        return self._request(f\"/light/{light_id}/blink\", params)\n\n    def rainbow(self, light_id: int, speed: str = \"slow\") -&gt; Dict[str, Any]:\n        \"\"\"Start rainbow effect.\"\"\"\n        params = {\"speed\": speed}\n        return self._request(f\"/light/{light_id}/rainbow\", params)\n\n# Usage example\nclient = BusyLightClient(auth=(\"admin\", \"password\"))\n\n# Turn first light red\nclient.turn_on(0, \"red\")\n\n# Blink all lights blue\nclient.blink(0, \"blue\", count=5)\n\n# Get device information\nlights = client.list_lights()\nprint(f\"Found {len(lights)} lights\")\n</code></pre>"},{"location":"api/integration/#javascriptnodejs-client","title":"JavaScript/Node.js Client","text":"<pre><code>// busylight-client.js\nclass BusyLightClient {\n    constructor(baseUrl = 'http://localhost:8000', auth = null) {\n        this.baseUrl = baseUrl.replace(/\\/$/, '');\n        this.auth = auth;\n    }\n\n    async _request(endpoint, params = {}) {\n        const url = new URL(endpoint, this.baseUrl);\n        Object.keys(params).forEach(key =&gt; {\n            url.searchParams.append(key, params[key]);\n        });\n\n        const options = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n\n        if (this.auth) {\n            const credentials = btoa(`${this.auth.user}:${this.auth.pass}`);\n            options.headers['Authorization'] = `Basic ${credentials}`;\n        }\n\n        const response = await fetch(url, options);\n        if (!response.ok) {\n            throw new Error(`API Error: ${response.statusText}`);\n        }\n\n        return response.json();\n    }\n\n    async listLights() {\n        return this._request('/lights/status');\n    }\n\n    async turnOn(lightId, color = 'green', led = 0, dim = 1.0) {\n        return this._request(`/light/${lightId}/on`, {\n            color, led, dim\n        });\n    }\n\n    async turnOnAll(color = 'green', led = 0, dim = 1.0) {\n        return this._request('/lights/on', { color, led, dim });\n    }\n\n    async turnOff(lightId) {\n        return this._request(`/light/${lightId}/off`);\n    }\n\n    async blink(lightId, color = 'red', count = 0, speed = 'slow', led = 0) {\n        return this._request(`/light/${lightId}/blink`, {\n            color, count, speed, led\n        });\n    }\n\n    async rainbow(lightId, speed = 'slow') {\n        return this._request(`/light/${lightId}/rainbow`, { speed });\n    }\n}\n\n// Usage\nconst client = new BusyLightClient('http://localhost:8000', {\n    user: 'admin',\n    pass: 'password'\n});\n\n// Turn light red\nclient.turnOn(0, 'red')\n    .then(result =&gt; console.log('Light turned on:', result))\n    .catch(error =&gt; console.error('Error:', error));\n</code></pre>"},{"location":"api/integration/#integration-examples","title":"Integration Examples","text":""},{"location":"api/integration/#cicd-pipeline-integration","title":"CI/CD Pipeline Integration","text":"<pre><code># .github/workflows/ci.yml\nname: CI Pipeline with BusyLight\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: self-hosted  # Requires self-hosted runner with BusyLight\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Signal build start\n        run: |\n          curl -f \"http://localhost:8000/lights/blink?color=blue\" || true\n\n      - name: Run tests\n        run: |\n          npm test\n\n      - name: Signal success\n        if: success()\n        run: |\n          curl -f \"http://localhost:8000/lights/on?color=green\" || true\n          sleep 2\n          curl -f \"http://localhost:8000/lights/off\" || true\n\n      - name: Signal failure  \n        if: failure()\n        run: |\n          curl -f \"http://localhost:8000/lights/blink?color=red&amp;count=10\" || true\n</code></pre>"},{"location":"api/integration/#monitoring-integration","title":"Monitoring Integration","text":"<pre><code># monitoring.py\nimport time\nimport psutil\nfrom busylight_client import BusyLightClient\n\ndef monitor_system():\n    \"\"\"Monitor system resources and update light status.\"\"\"\n    client = BusyLightClient()\n\n    while True:\n        try:\n            # Get system metrics\n            cpu_percent = psutil.cpu_percent(interval=1)\n            memory_percent = psutil.virtual_memory().percent\n\n            # Determine status color\n            if cpu_percent &gt; 80 or memory_percent &gt; 90:\n                color = \"red\"    # Critical\n            elif cpu_percent &gt; 60 or memory_percent &gt; 75:\n                color = \"yellow\" # Warning\n            else:\n                color = \"green\"  # Normal\n\n            # Update light\n            client.turn_on_all(color)\n\n            print(f\"CPU: {cpu_percent}%, Memory: {memory_percent}%, \"\n                  f\"Status: {color}\")\n\n        except Exception as e:\n            print(f\"Error: {e}\")\n            client.turn_on_all(\"red\")  # Error state\n\n        time.sleep(10)\n\nif __name__ == \"__main__\":\n    monitor_system()\n</code></pre>"},{"location":"api/integration/#web-dashboard","title":"Web Dashboard","text":"<pre><code>&lt;!-- dashboard.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;BusyLight Dashboard&lt;/title&gt;\n    &lt;style&gt;\n        .light-control { margin: 10px 0; }\n        button { margin: 5px; padding: 10px; }\n        .status { font-family: monospace; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;BusyLight Control Dashboard&lt;/h1&gt;\n\n    &lt;div class=\"light-control\"&gt;\n        &lt;h3&gt;Quick Controls&lt;/h3&gt;\n        &lt;button onclick=\"setStatus('available')\"&gt;Available&lt;/button&gt;\n        &lt;button onclick=\"setStatus('busy')\"&gt;Busy&lt;/button&gt;\n        &lt;button onclick=\"setStatus('meeting')\"&gt;In Meeting&lt;/button&gt;\n        &lt;button onclick=\"setStatus('offline')\"&gt;Offline&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"light-control\"&gt;\n        &lt;h3&gt;Effects&lt;/h3&gt;\n        &lt;button onclick=\"startEffect('rainbow')\"&gt;Rainbow&lt;/button&gt;\n        &lt;button onclick=\"startEffect('blink')\"&gt;Blink&lt;/button&gt;\n        &lt;button onclick=\"startEffect('pulse')\"&gt;Pulse&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"status\" id=\"status\"&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        const API_BASE = 'http://localhost:8000';\n\n        async function apiCall(endpoint, params = {}) {\n            const url = new URL(endpoint, API_BASE);\n            Object.keys(params).forEach(key =&gt; {\n                url.searchParams.append(key, params[key]);\n            });\n\n            try {\n                const response = await fetch(url);\n                const data = await response.json();\n                document.getElementById('status').innerText = \n                    JSON.stringify(data, null, 2);\n                return data;\n            } catch (error) {\n                document.getElementById('status').innerText = \n                    `Error: ${error.message}`;\n            }\n        }\n\n        function setStatus(status) {\n            const colors = {\n                'available': 'green',\n                'busy': 'yellow', \n                'meeting': 'red',\n                'offline': 'black'\n            };\n\n            if (status === 'offline') {\n                apiCall('/lights/off');\n            } else {\n                apiCall('/lights/on', { color: colors[status] });\n            }\n        }\n\n        function startEffect(effect) {\n            if (effect === 'rainbow') {\n                apiCall('/lights/rainbow');\n            } else if (effect === 'blink') {\n                apiCall('/lights/blink', { color: 'red', count: 5 });\n            } else if (effect === 'pulse') {\n                apiCall('/lights/pulse', { color: 'blue', count: 3 });\n            }\n        }\n\n        // Load initial status\n        apiCall('/lights/status');\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"api/integration/#slack-bot-integration","title":"Slack Bot Integration","text":"<pre><code># slack_bot.py\nfrom slack_sdk import WebClient\nfrom slack_sdk.socket_mode import SocketModeClient\nfrom slack_sdk.socket_mode.request import SocketModeRequest\nfrom slack_sdk.socket_mode.response import SocketModeResponse\nfrom busylight_client import BusyLightClient\nimport os\n\nclass BusyLightSlackBot:\n    def __init__(self):\n        self.slack_client = WebClient(token=os.environ[\"SLACK_BOT_TOKEN\"])\n        self.socket_client = SocketModeClient(\n            app_token=os.environ[\"SLACK_APP_TOKEN\"],\n            web_client=self.slack_client\n        )\n        self.light_client = BusyLightClient()\n\n        # Register command handler\n        self.socket_client.socket_mode_request_listeners.append(\n            self.handle_commands\n        )\n\n    def handle_commands(self, client: SocketModeClient, req: SocketModeRequest):\n        if req.type == \"slash_commands\":\n            command = req.payload[\"command\"]\n            text = req.payload[\"text\"]\n\n            if command == \"/busylight\":\n                response_text = self.process_light_command(text)\n\n                # Send response\n                response = SocketModeResponse(envelope_id=req.envelope_id)\n                client.send_socket_mode_response(response)\n\n                # Send message to channel\n                client.web_client.chat_postMessage(\n                    channel=req.payload[\"channel_id\"],\n                    text=response_text\n                )\n\n    def process_light_command(self, command_text: str) -&gt; str:\n        \"\"\"Process light control commands.\"\"\"\n        try:\n            parts = command_text.split()\n            if not parts:\n                return \"Usage: /busylight &lt;on|off|blink&gt; [color]\"\n\n            action = parts[0].lower()\n            color = parts[1] if len(parts) &gt; 1 else \"green\"\n\n            if action == \"on\":\n                self.light_client.turn_on_all(color)\n                return f\"\u2705 Lights turned on ({color})\"\n            elif action == \"off\":\n                self.light_client.turn_off_all()\n                return \"\u2705 Lights turned off\"\n            elif action == \"blink\":\n                self.light_client.blink(0, color, count=3)\n                return f\"\u2705 Lights blinking ({color})\"\n            else:\n                return \"\u274c Unknown command. Use: on, off, or blink\"\n\n        except Exception as e:\n            return f\"\u274c Error: {str(e)}\"\n\n    def start(self):\n        self.socket_client.connect()\n\nif __name__ == \"__main__\":\n    bot = BusyLightSlackBot()\n    bot.start()\n</code></pre>"},{"location":"api/integration/#error-handling-best-practices","title":"Error Handling Best Practices","text":"<pre><code>import requests\nimport time\nfrom typing import Optional\n\nclass RobustBusyLightClient:\n    def __init__(self, base_url: str, max_retries: int = 3):\n        self.base_url = base_url\n        self.max_retries = max_retries\n        self.session = requests.Session()\n\n    def _safe_request(self, endpoint: str, params: Optional[dict] = None) -&gt; Optional[dict]:\n        \"\"\"Make API request with retry logic and error handling.\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n\n        for attempt in range(self.max_retries):\n            try:\n                response = self.session.get(url, params=params, timeout=5)\n                response.raise_for_status()\n                return response.json()\n\n            except requests.exceptions.ConnectionError:\n                print(f\"Connection failed (attempt {attempt + 1})\")\n                if attempt &lt; self.max_retries - 1:\n                    time.sleep(2 ** attempt)  # Exponential backoff\n                    continue\n\n            except requests.exceptions.HTTPError as e:\n                print(f\"HTTP error: {e}\")\n                break  # Don't retry HTTP errors\n\n            except requests.exceptions.Timeout:\n                print(f\"Request timeout (attempt {attempt + 1})\")\n                if attempt &lt; self.max_retries - 1:\n                    continue\n\n        return None\n\n    def safe_turn_on(self, light_id: int, color: str) -&gt; bool:\n        \"\"\"Safely turn on light with error handling.\"\"\"\n        result = self._safe_request(f\"/light/{light_id}/on\", {\"color\": color})\n        return result is not None\n</code></pre> <p>These examples demonstrate how to integrate the BusyLight API into various applications and services, with proper error handling and authentication.</p>"},{"location":"cli/","title":"Command Line Interface","text":"<p>The <code>busylight</code> command provides control over USB LED lights through various subcommands. All commands support color specification and device targeting.</p>"},{"location":"cli/#global-options","title":"Global Options","text":"Option Description <code>--all</code> Target all connected lights <code>--lights INDEX</code> Target specific lights by index (comma-separated) <code>--timeout SECONDS</code> Set operation timeout <code>--dim FACTOR</code> Brightness scaling (0.0-1.0) <code>--debug</code> Enable debug logging"},{"location":"cli/#available-commands","title":"Available Commands","text":"Command Purpose <code>on</code> Turn lights on with specified color <code>off</code> Turn lights off <code>blink</code> Create blinking effect <code>rainbow</code> Rainbow color cycling effect <code>pulse</code> Pulsing/breathing effect <code>fli</code> Flash Lights Impressively (two-color blink) <code>list</code> Show connected devices <code>udev-rules</code> Generate Linux udev rules"},{"location":"cli/#color-specification","title":"Color Specification","text":"<p>Colors can be specified in multiple formats:</p> <pre><code># Named colors\nbusylight on red\nbusylight on green\nbusylight on blue\n\n# Hex values\nbusylight on \"#ff0000\"    # Red\nbusylight on \"#00ff00\"    # Green  \nbusylight on \"0x0000ff\"   # Blue\n\n# RGB tuples (programmatic)\nbusylight on \"rgb(255,0,0)\"  # Red\n</code></pre>"},{"location":"cli/#device-targeting","title":"Device Targeting","text":""},{"location":"cli/#all-devices","title":"All Devices","text":"<pre><code># Target all connected lights\nbusylight --all on red\nbusylight --all off\n</code></pre>"},{"location":"cli/#specific-devices","title":"Specific Devices","text":"<pre><code># Target first light (index 0)\nbusylight --lights 0 on blue\n\n# Target multiple lights\nbusylight --lights 0,2 blink green\n\n# List devices to see indices\nbusylight list\n</code></pre>"},{"location":"cli/#led-targeting-multi-led-devices","title":"LED Targeting (Multi-LED Devices)","text":"<p>For devices with multiple LEDs (Blink1 mk2, BlinkStick variants):</p> <pre><code># Control all LEDs (default)\nbusylight on red\n\n# Control specific LED\nbusylight on red --led 1     # Top/first LED\nbusylight on blue --led 2    # Bottom/second LED\n\n# Blink specific LED\nbusylight blink green --led 1 --count 5\n</code></pre>"},{"location":"cli/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"cli/#status-indication","title":"Status Indication","text":"<pre><code># Success (green)\nbusylight on green\n\n# Warning (yellow/amber)\nbusylight on yellow\n\n# Error (red)\nbusylight on red\n\n# Processing (blue blink)\nbusylight blink blue\n</code></pre>"},{"location":"cli/#meeting-status","title":"Meeting Status","text":"<pre><code># Available\nbusylight on green\n\n# Busy  \nbusylight on red\n\n# Do not disturb\nbusylight blink red --count 3\n\n# In meeting\nbusylight rainbow\n</code></pre>"},{"location":"cli/#build-status-integration","title":"Build Status Integration","text":"<pre><code># Build started\nbusylight blink yellow\n\n# Build passed\nbusylight on green\n\n# Build failed\nbusylight blink red --count 5\n\n# Build stopped\nbusylight off\n</code></pre>"},{"location":"cli/#advanced-features","title":"Advanced Features","text":""},{"location":"cli/#brightness-control","title":"Brightness Control","text":"<pre><code># Dim to 50%\nbusylight --dim 0.5 on red\n\n# Very dim (10%)\nbusylight --dim 0.1 on blue\n</code></pre>"},{"location":"cli/#timeouts","title":"Timeouts","text":"<pre><code># Timeout after 30 seconds\nbusylight --timeout 30 blink red\n\n# No timeout (indefinite)\nbusylight --timeout 0 rainbow\n</code></pre>"},{"location":"cli/#debug-output","title":"Debug Output","text":"<pre><code># Show detailed information\nbusylight --debug list\nbusylight --debug on red\n</code></pre>"},{"location":"cli/#error-handling","title":"Error Handling","text":"<p>The CLI provides clear error messages:</p> <ul> <li>No devices found: Check connections and udev rules (Linux)</li> <li>Invalid color: Use supported color names or hex values</li> <li>Device unavailable: Device may be in use by another process</li> <li>Permission denied: Install udev rules (Linux) or run with elevated   privileges</li> </ul> <p>For detailed troubleshooting, use the <code>--debug</code> flag to see diagnostic information.</p>"},{"location":"cli/commands/","title":"Command Reference","text":"<p>Complete reference for all <code>busylight</code> subcommands.</p>"},{"location":"cli/commands/#on","title":"on","text":"<p>Turn lights on with specified color.</p>"},{"location":"cli/commands/#syntax","title":"Syntax","text":"<pre><code>busylight on [COLOR] [OPTIONS]\n</code></pre>"},{"location":"cli/commands/#arguments","title":"Arguments","text":"<ul> <li><code>COLOR</code> - Color specification (default: green)</li> </ul>"},{"location":"cli/commands/#options","title":"Options","text":"Option Type Description <code>--led</code> int Target LED index (0=all, 1+=specific)"},{"location":"cli/commands/#examples","title":"Examples","text":"<pre><code># Basic usage\nbusylight on                    # Green (default)\nbusylight on red                # Red\nbusylight on \"#ff0000\"          # Red (hex)\n\n# LED targeting\nbusylight on red --led 1        # Top LED only\nbusylight on blue --led 2       # Bottom LED only\n</code></pre>"},{"location":"cli/commands/#off","title":"off","text":"<p>Turn lights off.</p>"},{"location":"cli/commands/#syntax_1","title":"Syntax","text":"<pre><code>busylight off\n</code></pre>"},{"location":"cli/commands/#examples_1","title":"Examples","text":"<pre><code>busylight off                   # Turn off all lights\nbusylight --lights 0 off        # Turn off first light only\n</code></pre>"},{"location":"cli/commands/#blink","title":"blink","text":"<p>Create blinking effect alternating between color and off.</p>"},{"location":"cli/commands/#syntax_2","title":"Syntax","text":"<pre><code>busylight blink [COLOR] [OPTIONS]\n</code></pre>"},{"location":"cli/commands/#arguments_1","title":"Arguments","text":"<ul> <li><code>COLOR</code> - Blink color (default: red)</li> </ul>"},{"location":"cli/commands/#options_1","title":"Options","text":"Option Type Description <code>--count</code> / <code>-c</code> int Number of blinks (0=infinite) <code>--speed</code> / <code>-s</code> choice Blink speed (slow, medium, fast) <code>--led</code> int Target LED index (0=all, 1+=specific)"},{"location":"cli/commands/#examples_2","title":"Examples","text":"<pre><code># Basic blinking\nbusylight blink                 # Red, slow, infinite\nbusylight blink blue            # Blue, slow, infinite\nbusylight blink green --count 5 # Green, 5 blinks\n\n# Speed control\nbusylight blink red --speed fast\nbusylight blink yellow --speed medium\n\n# LED targeting\nbusylight blink red --led 1 --count 3\n</code></pre>"},{"location":"cli/commands/#rainbow","title":"rainbow","text":"<p>Rainbow color cycling effect.</p>"},{"location":"cli/commands/#syntax_3","title":"Syntax","text":"<pre><code>busylight rainbow [OPTIONS]\n</code></pre>"},{"location":"cli/commands/#options_2","title":"Options","text":"Option Type Description <code>--speed</code> / <code>-s</code> choice Effect speed (slow, medium, fast)"},{"location":"cli/commands/#examples_3","title":"Examples","text":"<pre><code>busylight rainbow               # Default speed\nbusylight rainbow --speed fast  # Fast rainbow\n</code></pre>"},{"location":"cli/commands/#pulse","title":"pulse","text":"<p>Pulsing/breathing effect with gradual brightness changes.</p>"},{"location":"cli/commands/#syntax_4","title":"Syntax","text":"<pre><code>busylight pulse [COLOR] [OPTIONS]\n</code></pre>"},{"location":"cli/commands/#arguments_2","title":"Arguments","text":"<ul> <li><code>COLOR</code> - Pulse color (default: red)</li> </ul>"},{"location":"cli/commands/#options_3","title":"Options","text":"Option Type Description <code>--count</code> / <code>-c</code> int Number of pulses (0=infinite) <code>--speed</code> / <code>-s</code> choice Pulse speed (slow, medium, fast)"},{"location":"cli/commands/#examples_4","title":"Examples","text":"<pre><code>busylight pulse                 # Red pulse\nbusylight pulse blue --count 3  # Blue, 3 pulses\nbusylight pulse green --speed fast\n</code></pre>"},{"location":"cli/commands/#fli","title":"fli","text":"<p>Flash Lights Impressively - alternates between two colors.</p>"},{"location":"cli/commands/#syntax_5","title":"Syntax","text":"<pre><code>busylight fli [OPTIONS]\n</code></pre>"},{"location":"cli/commands/#options_4","title":"Options","text":"Option Type Description <code>--color1</code> str First color (default: red) <code>--color2</code> str Second color (default: blue) <code>--count</code> / <code>-c</code> int Number of flashes (0=infinite) <code>--speed</code> / <code>-s</code> choice Flash speed (slow, medium, fast)"},{"location":"cli/commands/#examples_5","title":"Examples","text":"<pre><code>busylight fli                   # Red/blue alternating\nbusylight fli --color1 green --color2 yellow\nbusylight fli --count 10 --speed fast\n</code></pre>"},{"location":"cli/commands/#list","title":"list","text":"<p>Display connected light devices.</p>"},{"location":"cli/commands/#syntax_6","title":"Syntax","text":"<pre><code>busylight list [OPTIONS]\n</code></pre>"},{"location":"cli/commands/#options_5","title":"Options","text":"Option Type Description <code>--verbose</code> / <code>-v</code> flag Show detailed device information"},{"location":"cli/commands/#examples_6","title":"Examples","text":"<pre><code>busylight list                  # Basic device list\nbusylight list --verbose        # Detailed information\n</code></pre>"},{"location":"cli/commands/#sample-output","title":"Sample Output","text":"<pre><code>Connected Lights:\n0: Blink(1) mk2\n1: BlinkStick Square\n</code></pre> <p>With <code>--verbose</code>:</p> <pre><code>Connected Lights:\n0: Blink(1) mk2\n   Path: /dev/hidraw0\n   Vendor ID: 0x27B8\n   Product ID: 0x01ED\n   Serial: ABC123\n\n1: BlinkStick Square  \n   Path: /dev/hidraw1\n   Vendor ID: 0x20A0\n   Product ID: 0x41E5\n   Serial: DEF456\n</code></pre>"},{"location":"cli/commands/#udev-rules","title":"udev-rules","text":"<p>Generate Linux udev rules for USB device access.</p>"},{"location":"cli/commands/#syntax_7","title":"Syntax","text":"<pre><code>busylight udev-rules [OPTIONS]\n</code></pre>"},{"location":"cli/commands/#options_6","title":"Options","text":"Option Type Description <code>--output</code> / <code>-o</code> str Output file name"},{"location":"cli/commands/#examples_7","title":"Examples","text":"<pre><code># Output to stdout\nbusylight udev-rules\n\n# Save to file\nbusylight udev-rules -o 99-busylights.rules\n\n# Install (requires root)\nbusylight udev-rules -o 99-busylights.rules\nsudo cp 99-busylights.rules /etc/udev/rules.d/\nsudo udevadm control -R\n</code></pre>"},{"location":"cli/commands/#global-options-reference","title":"Global Options Reference","text":"<p>These options apply to all commands:</p> Option Type Description <code>--all</code> flag Target all connected lights <code>--lights</code> str Comma-separated light indices <code>--timeout</code> float Operation timeout in seconds <code>--dim</code> float Brightness factor (0.0-1.0) <code>--debug</code> flag Enable debug logging <code>--help</code> flag Show help message"},{"location":"cli/commands/#examples_8","title":"Examples","text":"<pre><code># Target all lights\nbusylight --all on red\n\n# Target specific lights\nbusylight --lights 0,2 blink blue\n\n# Dim to 25%\nbusylight --dim 0.25 on white\n\n# Debug mode\nbusylight --debug list\n</code></pre>"},{"location":"cli/examples/","title":"CLI Examples","text":"<p>Practical examples for common use cases and automation scenarios.</p>"},{"location":"cli/examples/#basic-light-control","title":"Basic Light Control","text":""},{"location":"cli/examples/#simple-onoff","title":"Simple On/Off","text":"<pre><code># Turn light on (green by default)\nbusylight on\n\n# Turn light red\nbusylight on red\n\n# Turn light off\nbusylight off\n\n# Turn all connected lights on\nbusylight --all on blue\n</code></pre>"},{"location":"cli/examples/#color-variations","title":"Color Variations","text":"<pre><code># Named colors\nbusylight on red\nbusylight on green  \nbusylight on blue\nbusylight on yellow\nbusylight on purple\nbusylight on white\n\n# Hex colors\nbusylight on \"#ff0000\"    # Red\nbusylight on \"#00ff00\"    # Green\nbusylight on \"#0000ff\"    # Blue\nbusylight on \"0xffff00\"   # Yellow\n\n# Brightness control\nbusylight --dim 0.5 on red     # 50% brightness\nbusylight --dim 0.1 on blue    # 10% brightness\n</code></pre>"},{"location":"cli/examples/#effects-and-animation","title":"Effects and Animation","text":""},{"location":"cli/examples/#blinking-patterns","title":"Blinking Patterns","text":"<pre><code># Basic blinking\nbusylight blink                      # Red, slow, infinite\nbusylight blink blue                 # Blue, slow, infinite\n\n# Controlled blinking\nbusylight blink red --count 5        # 5 red blinks\nbusylight blink green --speed fast   # Fast green blinks\n\n# Alert patterns\nbusylight blink red --count 3 --speed fast    # Urgent alert\nbusylight blink yellow --count 10 --speed slow # Slow warning\n</code></pre>"},{"location":"cli/examples/#advanced-effects","title":"Advanced Effects","text":"<pre><code># Rainbow cycling\nbusylight rainbow                    # Default speed\nbusylight rainbow --speed fast       # Fast rainbow\n\n# Pulsing effect\nbusylight pulse blue                 # Blue pulse\nbusylight pulse red --count 5        # 5 red pulses\n\n# Flash Lights Impressively\nbusylight fli                        # Red/blue alternating\nbusylight fli --color1 green --color2 yellow --count 10\n</code></pre>"},{"location":"cli/examples/#multi-led-device-control","title":"Multi-LED Device Control","text":"<p>For devices with multiple LEDs (Blink1 mk2, BlinkStick variants):</p>"},{"location":"cli/examples/#individual-led-control","title":"Individual LED Control","text":"<pre><code># Control all LEDs (default behavior)\nbusylight on red\n\n# Control top LED only\nbusylight on red --led 1\n\n# Control bottom LED only  \nbusylight on blue --led 2\n\n# Different colors on different LEDs\nbusylight on red --led 1    # Top LED red\nbusylight on blue --led 2   # Bottom LED blue\n</code></pre>"},{"location":"cli/examples/#led-specific-effects","title":"LED-Specific Effects","text":"<pre><code># Blink top LED only\nbusylight blink green --led 1 --count 5\n\n# Pulse bottom LED\nbusylight pulse yellow --led 2 --count 3\n\n# Create alternating pattern\nbusylight blink red --led 1 &amp;      # Background process\nsleep 0.5                          # Offset timing\nbusylight blink blue --led 2 &amp;     # Background process\nwait                               # Wait for completion\n</code></pre>"},{"location":"cli/examples/#status-indication","title":"Status Indication","text":""},{"location":"cli/examples/#meeting-status","title":"Meeting Status","text":"<pre><code>#!/bin/bash\n# meeting-status.sh\n\ncase \"$1\" in\n    available)\n        busylight on green\n        echo \"Status: Available\"\n        ;;\n    busy)\n        busylight on yellow\n        echo \"Status: Busy\"\n        ;;\n    meeting)\n        busylight on red\n        echo \"Status: In Meeting\"\n        ;;\n    dnd)\n        busylight blink red --count 3\n        echo \"Status: Do Not Disturb\"\n        ;;\n    offline)\n        busylight off\n        echo \"Status: Offline\"\n        ;;\n    *)\n        echo \"Usage: $0 {available|busy|meeting|dnd|offline}\"\n        exit 1\n        ;;\nesac\n</code></pre>"},{"location":"cli/examples/#system-monitoring","title":"System Monitoring","text":"<pre><code>#!/bin/bash\n# system-monitor.sh\n\n# CPU usage indicator\ncpu_usage=$(top -bn1 | grep \"Cpu(s)\" | awk '{print $2}' | cut -d'%' -f1)\n\nif (( $(echo \"$cpu_usage &gt; 80\" | bc -l) )); then\n    busylight on red         # High CPU\nelif (( $(echo \"$cpu_usage &gt; 50\" | bc -l) )); then\n    busylight on yellow      # Medium CPU\nelse\n    busylight on green       # Low CPU\nfi\n\necho \"CPU Usage: ${cpu_usage}%\"\n</code></pre>"},{"location":"cli/examples/#build-and-ci-integration","title":"Build and CI Integration","text":""},{"location":"cli/examples/#git-hook-example","title":"Git Hook Example","text":"<pre><code>#!/bin/bash\n# .git/hooks/pre-commit\n\necho \"Running tests...\"\nbusylight blink yellow &amp;  # Show testing in progress\nTEST_PID=$!\n\nif npm test; then\n    kill $TEST_PID 2&gt;/dev/null\n    busylight on green --count 1\n    echo \"Tests passed!\"\nelse\n    kill $TEST_PID 2&gt;/dev/null  \n    busylight blink red --count 5\n    echo \"Tests failed!\"\n    exit 1\nfi\n</code></pre>"},{"location":"cli/examples/#ci-status-notifications","title":"CI Status Notifications","text":"<pre><code>#!/bin/bash\n# ci-notify.sh - Call from CI/CD pipeline\n\ncase \"$1\" in\n    start)\n        busylight blink blue\n        ;;\n    success)\n        busylight on green\n        sleep 2\n        busylight off\n        ;;\n    failure)\n        busylight blink red --count 10\n        busylight off\n        ;;\n    *)\n        echo \"Usage: $0 {start|success|failure}\"\n        exit 1\n        ;;\nesac\n</code></pre>"},{"location":"cli/examples/#automation-and-scripting","title":"Automation and Scripting","text":""},{"location":"cli/examples/#time-based-status","title":"Time-Based Status","text":"<pre><code>#!/bin/bash\n# work-hours.sh - Run via cron\n\nhour=$(date +%H)\n\nif [[ $hour -ge 9 &amp;&amp; $hour -lt 17 ]]; then\n    # Work hours (9 AM - 5 PM)\n    busylight on green\nelif [[ $hour -ge 17 &amp;&amp; $hour -lt 19 ]]; then\n    # Extended hours (5 PM - 7 PM)\n    busylight on yellow\nelse\n    # Off hours\n    busylight off\nfi\n</code></pre>"},{"location":"cli/examples/#calendar-integration","title":"Calendar Integration","text":"<pre><code>#!/bin/bash\n# calendar-status.sh\n\n# Check for upcoming meetings (example with calendar command)\nupcoming=$(calendar -t $(date +\"%Y-%m-%d\") | head -n 1)\n\nif [[ -n \"$upcoming\" ]]; then\n    # Meeting coming up\n    busylight pulse yellow --count 3\n    echo \"Upcoming: $upcoming\"\nelse\n    # No immediate meetings\n    busylight on green\n    echo \"No upcoming meetings\"\nfi\n</code></pre>"},{"location":"cli/examples/#device-testing","title":"Device Testing","text":"<pre><code>#!/bin/bash\n# device-test.sh - Test all connected lights\n\necho \"Testing connected devices...\"\nbusylight list\n\necho \"Running color test sequence...\"\nfor color in red green blue yellow purple white; do\n    echo \"Testing $color...\"\n    busylight --all on $color\n    sleep 1\ndone\n\necho \"Testing effects...\"\nbusylight --all blink red --count 3\nsleep 2\nbusylight --all rainbow &amp;\nRAINBOW_PID=$!\nsleep 5\nkill $RAINBOW_PID\n\necho \"Test complete\"\nbusylight --all off\n</code></pre>"},{"location":"cli/examples/#advanced-usage","title":"Advanced Usage","text":""},{"location":"cli/examples/#multiple-device-management","title":"Multiple Device Management","text":"<pre><code>#!/bin/bash\n# multi-device.sh\n\n# List devices and get indices\nbusylight list\n\n# Set different colors on different devices\nbusylight --lights 0 on red       # First device red\nbusylight --lights 1 on green     # Second device green  \nbusylight --lights 2 on blue      # Third device blue\n\n# Create coordinated effect\nbusylight --lights 0,2 blink red --count 5 &amp;    # Devices 0,2\nbusylight --lights 1 pulse green --count 5 &amp;     # Device 1\nwait  # Wait for all effects to complete\n</code></pre>"},{"location":"cli/examples/#error-handling","title":"Error Handling","text":"<pre><code>#!/bin/bash\n# robust-control.sh\n\nset -e  # Exit on error\n\n# Function to safely control light\ncontrol_light() {\n    local color=\"$1\"\n    local retries=3\n\n    for ((i=1; i&lt;=retries; i++)); do\n        if busylight on \"$color\" 2&gt;/dev/null; then\n            echo \"Light set to $color\"\n            return 0\n        else\n            echo \"Attempt $i failed, retrying...\" &gt;&amp;2\n            sleep 1\n        fi\n    done\n\n    echo \"Failed to control light after $retries attempts\" &gt;&amp;2\n    return 1\n}\n\n# Usage\ncontrol_light \"green\" || echo \"Light control failed, continuing...\"\n</code></pre> <p>These examples demonstrate the flexibility and power of the <code>busylight</code> CLI for various automation and notification scenarios.</p>"},{"location":"devices/","title":"Supported Devices","text":"<p>BusyLight supports 23 USB LED devices from 9 vendors. This page provides compatibility information and setup instructions for each device type.</p>"},{"location":"devices/#compatibility-matrix","title":"Compatibility Matrix","text":"Vendor Models LED Support Platform Notes Agile Innovative BlinkStick variants Multi-LED targeting Full support Compulab fit-statUSB Single LED Full support EPOS Busylight Single LED Full support Embrava Blynclight variants Single LED Full support Kuando Busylight Alpha, Omega Single LED Keepalive required Luxafor Flag, Orb, Mute variants Multi/Single LED Model-dependent Plantronics Status Indicator Single LED Full support MuteMe Original, Mini, MuteSync Single LED Full support ThingM Blink(1), Blink(1) mk2 mk2: Multi-LED Full support"},{"location":"devices/#led-support-types","title":"LED Support Types","text":""},{"location":"devices/#single-led-devices","title":"Single LED Devices","text":"<p>Most devices have a single LED that displays one color at a time. The <code>led</code> parameter is ignored for these devices.</p>"},{"location":"devices/#multi-led-devices","title":"Multi-LED Devices","text":"<p>Some devices have multiple independent LEDs that can display different colors simultaneously:</p> <ul> <li>Blink(1) mk2: 2 LEDs (top and bottom)</li> <li>BlinkStick variants: 1-64 LEDs depending on model</li> <li>Luxafor Flag: 6 LEDs in flag pattern</li> </ul>"},{"location":"devices/#vendor-details","title":"Vendor Details","text":""},{"location":"devices/#agile-innovative","title":"Agile Innovative","text":"<p>BlinkStick Series - USB LED controllers with various form factors.</p> <p>Models: - BlinkStick (single LED) - BlinkStick Pro (2 LEDs) - BlinkStick Square (8 LEDs) - BlinkStick Strip (up to 64 LEDs) - BlinkStick Nano (single LED) - BlinkStick Flex (32 LEDs)</p> <p>LED Control: <pre><code># Single LED models\nbusylight on red\n\n# Multi-LED models\nbusylight on red --led 1    # First LED\nbusylight on blue --led 8   # Eighth LED (Square)\n</code></pre></p> <p>Platform Support: macOS, Linux, Windows (experimental)</p>"},{"location":"devices/#compulab","title":"Compulab","text":"<p>fit-statUSB - Compact USB status light.</p> <p>Features: - Single RGB LED - Compact form factor - Low power consumption</p> <p>Platform Support: macOS, Linux</p>"},{"location":"devices/#epos","title":"EPOS","text":"<p>Busylight - Professional presence indicator.</p> <p>Features: - Single RGB LED - Professional design - USB powered</p> <p>Platform Support: macOS, Linux</p>"},{"location":"devices/#embrava","title":"Embrava","text":"<p>Blynclight Series - Professional presence lights.</p> <p>Models: - Blynclight (original) - Blynclight Mini (compact) - Blynclight Plus (enhanced brightness)</p> <p>Features: - Single RGB LED per device - Professional appearance - Stable USB connection</p> <p>Platform Support: macOS, Linux</p>"},{"location":"devices/#kuando","title":"Kuando","text":"<p>Busylight Series - Professional status lights with unique keepalive requirement.</p> <p>Models: - Busylight Alpha - Busylight Omega</p> <p>Special Requirements: Kuando devices require keepalive tasks to maintain USB connection. The CLI handles this automatically by keeping the process running:</p> <pre><code># This will run continuously for Kuando lights\nbusylight on red\n# Press Ctrl+C to stop\n</code></pre> <p>Platform Support: macOS, Linux</p>"},{"location":"devices/#luxafor","title":"Luxafor","text":"<p>Multi-purpose LED indicators with various form factors.</p> <p>Models: - Flag (6 LEDs in flag pattern) - Orb (single LED) - Mute (single LED) - Busy Tag (wearable, single LED) - Bluetooth variants</p> <p>LED Control for Flag: <pre><code># Control all LEDs\nbusylight on red\n\n# Control specific LED (Flag model)\nbusylight on red --led 1    # Top LED\nbusylight on blue --led 6   # Bottom right LED\n</code></pre></p> <p>Platform Support: macOS, Linux</p>"},{"location":"devices/#plantronics","title":"Plantronics","text":"<p>Status Indicator - Simple presence light.</p> <p>Features: - Single RGB LED - Minimal design - Reliable operation</p> <p>Platform Support: macOS, Linux</p>"},{"location":"devices/#muteme","title":"MuteMe","text":"<p>Mute Status Indicators - Meeting mute status lights.</p> <p>Models: - MuteMe Original - Mute Mini - MuteSync</p> <p>Features: - Single RGB LED - Meeting-focused design - USB powered</p> <p>Platform Support: macOS, Linux</p>"},{"location":"devices/#thingm","title":"ThingM","text":"<p>Blink(1) Series - Original USB notification lights.</p> <p>Models: - Blink(1) (original, single LED) - Blink(1) mk2 (2 independent LEDs)</p> <p>LED Control for mk2: <pre><code># Control both LEDs\nbusylight on red\n\n# Control top LED only\nbusylight on red --led 1\n\n# Control bottom LED only  \nbusylight on blue --led 2\n\n# Different colors on each LED\nbusylight on red --led 1\nbusylight on blue --led 2\n</code></pre></p> <p>Platform Support: macOS, Linux, Windows (experimental)</p>"},{"location":"devices/#device-discovery","title":"Device Discovery","text":"<p>List connected devices to see what's available:</p> <pre><code>busylight list\n</code></pre> <p>Example output: <pre><code>Connected Lights:\n0: Blink(1) mk2\n1: BlinkStick Square\n2: Kuando Busylight Alpha\n</code></pre></p> <p>Use the index numbers to target specific devices:</p> <pre><code>busylight --lights 0 on red      # First device only\nbusylight --lights 1,2 on green  # Second and third devices\n</code></pre>"},{"location":"devices/#platform-specific-setup","title":"Platform-Specific Setup","text":""},{"location":"devices/#linux-udev-rules-required","title":"Linux (udev rules required)","text":"<p>Generate and install udev rules for device access:</p> <pre><code>busylight udev-rules -o 99-busylights.rules\nsudo cp 99-busylights.rules /etc/udev/rules.d/\nsudo udevadm control -R\n# Unplug and reconnect devices\n</code></pre>"},{"location":"devices/#macos","title":"macOS","text":"<p>No additional setup required. System may prompt for USB device permissions.</p>"},{"location":"devices/#windows-experimental","title":"Windows (experimental)","text":"<p>Windows support is in development. Some devices may work, but full compatibility is not guaranteed.</p>"},{"location":"devices/#troubleshooting","title":"Troubleshooting","text":""},{"location":"devices/#device-not-found","title":"Device Not Found","text":"<ol> <li>Check connections: Verify USB cable and port</li> <li>List devices: Run <code>busylight list</code> to see detected devices</li> <li>Linux: Ensure udev rules are installed</li> <li>Permissions: Check USB device permissions</li> </ol>"},{"location":"devices/#device-appears-but-wont-control","title":"Device Appears But Won't Control","text":"<ol> <li>Check device index: Use <code>busylight list</code> to get correct index</li> <li>Try different colors: Some devices have color limitations</li> <li>Check for conflicts: Ensure no other software is controlling device</li> <li>Debug mode: Run with <code>--debug</code> flag for detailed information</li> </ol>"},{"location":"devices/#kuando-devices-stop-working","title":"Kuando Devices Stop Working","text":"<p>Kuando devices require active connection. If they stop responding:</p> <ol> <li>Restart the busylight command</li> <li>Ensure the process stays running (don't run in background)</li> <li>Check USB connection stability</li> </ol>"},{"location":"devices/#requesting-new-device-support","title":"Requesting New Device Support","text":"<p>To request support for additional devices, open an issue in the Busylight Core project with:</p> <ul> <li>Device vendor and model</li> <li>USB vendor ID and product ID</li> <li>Device specifications and capabilities</li> <li>Sample device for testing (if possible)</li> </ul>"},{"location":"devices/led-support/","title":"Multi-LED Device Support","text":"<p>Learn how to control individual LEDs on devices that support multiple independent light elements.</p>"},{"location":"devices/led-support/#overview","title":"Overview","text":"<p>Some USB LED devices contain multiple independent LEDs that can display different colors simultaneously. BusyLight provides precise control over these individual LEDs through the <code>--led</code> parameter (CLI) or <code>led</code> query parameter (API).</p>"},{"location":"devices/led-support/#supported-multi-led-devices","title":"Supported Multi-LED Devices","text":""},{"location":"devices/led-support/#blink1-mk2","title":"Blink(1) mk2","text":"<ul> <li>LEDs: 2 (top and bottom)</li> <li>Indexing: 1=top, 2=bottom</li> <li>Example: <code>busylight on red --led 1</code> (top LED red)</li> </ul>"},{"location":"devices/led-support/#blinkstick-variants","title":"BlinkStick Variants","text":""},{"location":"devices/led-support/#blinkstick-pro","title":"BlinkStick Pro","text":"<ul> <li>LEDs: 2</li> <li>Indexing: 1=first, 2=second</li> </ul>"},{"location":"devices/led-support/#blinkstick-square","title":"BlinkStick Square","text":"<ul> <li>LEDs: 8 (arranged in square)</li> <li>Indexing: 1-8 (clockwise from top-left)</li> </ul>"},{"location":"devices/led-support/#blinkstick-strip","title":"BlinkStick Strip","text":"<ul> <li>LEDs: Up to 64 (linear strip)</li> <li>Indexing: 1-64 (left to right)</li> </ul>"},{"location":"devices/led-support/#blinkstick-flex","title":"BlinkStick Flex","text":"<ul> <li>LEDs: Up to 32 (flexible strip)</li> <li>Indexing: 1-32 (start to end)</li> </ul>"},{"location":"devices/led-support/#luxafor-flag","title":"Luxafor Flag","text":"<ul> <li>LEDs: 6 (flag pattern)</li> <li>Indexing: 1-6 (varies by model)</li> </ul>"},{"location":"devices/led-support/#led-parameter-usage","title":"LED Parameter Usage","text":""},{"location":"devices/led-support/#default-behavior-led0","title":"Default Behavior (led=0)","text":"<p>When no LED is specified, all LEDs on the device display the same color:</p> <pre><code># CLI - all LEDs red\nbusylight on red\n\n# API - all LEDs red  \ncurl \"http://localhost:8000/light/0/on?color=red\"\n</code></pre>"},{"location":"devices/led-support/#specific-led-control-led1","title":"Specific LED Control (led=1+)","text":"<p>Target individual LEDs by index:</p> <pre><code># CLI examples\nbusylight on red --led 1      # First LED red\nbusylight on blue --led 2     # Second LED blue\nbusylight blink green --led 3 # Third LED blinks green\n\n# API examples\ncurl \"http://localhost:8000/light/0/on?color=red&amp;led=1\"\ncurl \"http://localhost:8000/light/0/blink?color=blue&amp;led=2&amp;count=5\"\n</code></pre>"},{"location":"devices/led-support/#device-specific-examples","title":"Device-Specific Examples","text":""},{"location":"devices/led-support/#blink1-mk2-patterns","title":"Blink(1) mk2 Patterns","text":"<pre><code># Status indicator patterns\nbusylight on green --led 1    # Top: available\nbusylight on red --led 2      # Bottom: busy\n\n# Meeting status\nbusylight off                 # Both off: offline\nbusylight on yellow --led 1   # Top: available\nbusylight on red --led 2      # Bottom: in meeting\n\n# Build status\nbusylight blink yellow --led 1 # Top: building\nbusylight on green --led 2     # Bottom: tests passed\n</code></pre>"},{"location":"devices/led-support/#blinkstick-square-8-leds","title":"BlinkStick Square (8 LEDs)","text":"<pre><code># Progress indicator (fill clockwise)\nbusylight on green --led 1    # 1/8 complete\nbusylight on green --led 2    # 2/8 complete\nbusylight on green --led 3    # 3/8 complete\n# ... continue for progress\n\n# Status ring\nbusylight on red --led 1      # Error at position 1\nbusylight on green --led 5    # Success at position 5\nbusylight blink yellow --led 3 # Warning at position 3\n</code></pre>"},{"location":"devices/led-support/#blinkstick-strip-linear","title":"BlinkStick Strip (Linear)","text":"<pre><code># VU meter effect\nfor i in {1..8}; do\n  busylight on green --led $i\n  sleep 0.1\ndone\n\n# Temperature indicator\nbusylight on blue --led 1     # Cold (left)\nbusylight on green --led 5    # Medium (middle)  \nbusylight on red --led 10     # Hot (right)\n</code></pre>"},{"location":"devices/led-support/#programming-patterns","title":"Programming Patterns","text":""},{"location":"devices/led-support/#python-multi-led-control","title":"Python Multi-LED Control","text":"<pre><code>from busylight_client import BusyLightClient\n\nclient = BusyLightClient()\n\n# Blink(1) mk2 dual status\ndef set_dual_status(top_color, bottom_color):\n    \"\"\"Set different colors on top and bottom LEDs.\"\"\"\n    client.turn_on(0, top_color, led=1)    # Top LED\n    client.turn_on(0, bottom_color, led=2) # Bottom LED\n\n# Usage\nset_dual_status(\"green\", \"red\")  # Available but busy\n</code></pre>"},{"location":"devices/led-support/#javascript-led-animation","title":"JavaScript LED Animation","text":"<pre><code>// BlinkStick Square wave effect\nasync function waveEffect(lightId, color) {\n    for (let led = 1; led &lt;= 8; led++) {\n        await client.turnOn(lightId, color, led);\n        await new Promise(resolve =&gt; setTimeout(resolve, 100));\n        await client.turnOff(lightId);\n    }\n}\n\nwaveEffect(0, 'blue');\n</code></pre>"},{"location":"devices/led-support/#shell-script-status-display","title":"Shell Script Status Display","text":"<pre><code>#!/bin/bash\n# multi-status.sh - Multi-LED status display\n\nset_build_status() {\n    local status=\"$1\"\n\n    case \"$status\" in\n        \"building\")\n            busylight blink yellow --led 1  # Top: building\n            busylight off --led 2           # Bottom: off\n            ;;\n        \"passed\")\n            busylight on green --led 1      # Top: success\n            busylight on green --led 2      # Bottom: success\n            ;;\n        \"failed\")\n            busylight on green --led 1      # Top: (last success)\n            busylight blink red --led 2     # Bottom: failed\n            ;;\n        \"stopped\")\n            busylight off                   # Both off\n            ;;\n    esac\n}\n\n# Usage\nset_build_status \"building\"\n# ... run build ...\nset_build_status \"passed\"\n</code></pre>"},{"location":"devices/led-support/#led-indexing-reference","title":"LED Indexing Reference","text":""},{"location":"devices/led-support/#general-rules","title":"General Rules","text":"<ul> <li>LED 0: All LEDs (default behavior)</li> <li>LED 1+: Specific LEDs (1-based indexing)</li> <li>Invalid indices: Ignored (no error, no effect)</li> <li>Single-LED devices: LED parameter ignored</li> </ul>"},{"location":"devices/led-support/#device-specific-indexing","title":"Device-Specific Indexing","text":"Device LED Count Index Range Layout Blink(1) mk2 2 1-2 1=top, 2=bottom BlinkStick Pro 2 1-2 Linear BlinkStick Square 8 1-8 Clockwise from top-left BlinkStick Strip 1-64 1-64 Left to right BlinkStick Flex 1-32 1-32 Start to end Luxafor Flag 6 1-6 Flag pattern"},{"location":"devices/led-support/#advanced-techniques","title":"Advanced Techniques","text":""},{"location":"devices/led-support/#led-state-management","title":"LED State Management","text":"<pre><code>class LEDStateManager:\n    def __init__(self, client, light_id):\n        self.client = client\n        self.light_id = light_id\n        self.led_states = {}\n\n    def set_led(self, led_index, color):\n        \"\"\"Set LED color and track state.\"\"\"\n        self.client.turn_on(self.light_id, color, led=led_index)\n        self.led_states[led_index] = color\n\n    def get_state(self, led_index):\n        \"\"\"Get current LED color.\"\"\"\n        return self.led_states.get(led_index, \"off\")\n\n    def clear_all(self):\n        \"\"\"Turn off all LEDs.\"\"\"\n        self.client.turn_off_all()\n        self.led_states.clear()\n\n# Usage\nmanager = LEDStateManager(client, 0)\nmanager.set_led(1, \"red\")\nmanager.set_led(2, \"green\")\nprint(manager.get_state(1))  # \"red\"\n</code></pre>"},{"location":"devices/led-support/#pattern-sequences","title":"Pattern Sequences","text":"<pre><code>#!/bin/bash\n# led-patterns.sh\n\n# Knight Rider effect (BlinkStick Strip)\nknight_rider() {\n    local max_led=8\n\n    # Forward sweep\n    for i in $(seq 1 $max_led); do\n        busylight on red --led $i\n        sleep 0.1\n        busylight off --led $i\n    done\n\n    # Backward sweep\n    for i in $(seq $max_led -1 1); do\n        busylight on red --led $i\n        sleep 0.1\n        busylight off --led $i\n    done\n}\n\n# Breathing effect (all LEDs)\nbreathing_effect() {\n    local color=\"$1\"\n\n    for brightness in 0.1 0.3 0.5 0.8 1.0 0.8 0.5 0.3 0.1; do\n        busylight --dim $brightness on $color\n        sleep 0.2\n    done\n}\n</code></pre>"},{"location":"devices/led-support/#troubleshooting-multi-led-issues","title":"Troubleshooting Multi-LED Issues","text":""},{"location":"devices/led-support/#led-not-responding","title":"LED Not Responding","text":"<ol> <li>Check LED index: Verify index is within device range</li> <li>Test all LEDs: Use <code>led=0</code> to confirm device works</li> <li>Check device model: Ensure device supports multiple LEDs</li> <li>Debug output: Use <code>--debug</code> flag for detailed information</li> </ol>"},{"location":"devices/led-support/#inconsistent-behavior","title":"Inconsistent Behavior","text":"<ol> <li>LED conflicts: Ensure no overlapping LED commands</li> <li>Device limitations: Some devices have LED interdependencies  </li> <li>Timing issues: Add delays between rapid LED changes</li> <li>Power limitations: High LED counts may have power constraints</li> </ol>"},{"location":"devices/led-support/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Batch operations: Group LED changes when possible</li> <li>Avoid rapid updates: Some devices have update rate limits</li> <li>Power management: Multiple LEDs consume more power</li> <li>USB bandwidth: Very high LED counts may need update throttling</li> </ul> <p>Multi-LED support enables sophisticated status displays and visual effects that would be impossible with single-LED devices.</p>"}]}